(()=>{"use strict";const e="@group(0) @binding(0) var screen_sampler : sampler;\r\n@group(0) @binding(1) var color_buffer : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n    @builtin(position) Position : vec4<f32>,\r\n    @location(0) TexCoord : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n\r\n    var positions = array<vec2<f32>, 6>(\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>( 1.0, -1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>( 1.0,  1.0),\r\n        vec2<f32>(-1.0, -1.0),\r\n        vec2<f32>(-1.0,  1.0)\r\n    );\r\n\r\n    var texCoords = array<vec2<f32>, 6>(\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(1.0, 1.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(1.0, 0.0),\r\n        vec2<f32>(0.0, 1.0),\r\n        vec2<f32>(0.0, 0.0)\r\n    );\r\n\r\n    var output : VertexOutput;\r\n    output.Position = vec4<f32>(positions[VertexIndex], 0.0, 1.0);\r\n    output.TexCoord = texCoords[VertexIndex];\r\n    return output;\r\n}\r\n\r\n@fragment\r\nfn frag_main(@location(0) TexCoord : vec2<f32>) -> @location(0) vec4<f32> {\r\n  return textureSample(color_buffer, screen_sampler, TexCoord);\r\n}";var r=function(e,r,n,t){return new(n||(n=Promise))((function(i,o){function a(e){try{s(t.next(e))}catch(e){o(e)}}function c(e){try{s(t.throw(e))}catch(e){o(e)}}function s(e){var r;e.done?i(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(a,c)}s((t=t.apply(e,r||[])).next())}))};const n=document.getElementById("gfx-main"),t=new class{constructor(e){this.render=()=>{let e=performance.now();const r=this.device.createCommandEncoder(),n=r.beginComputePass();n.setPipeline(this.ray_tracing_pipeline),n.setBindGroup(0,this.ray_tracing_bind_group),n.dispatchWorkgroups(this.canvas.width/8,this.canvas.height/8,1),n.end();const t=this.context.getCurrentTexture().createView(),i=r.beginRenderPass({colorAttachments:[{view:t,clearValue:{r:.5,g:0,b:.25,a:1},loadOp:"clear",storeOp:"store"}]});i.setPipeline(this.screen_pipeline),i.setBindGroup(0,this.screen_bind_group),i.draw(6,1,0,0),i.end(),this.device.queue.submit([r.finish()]),this.device.queue.onSubmittedWorkDone().then((()=>{let r=performance.now(),n=document.getElementById("render-time");n&&(n.innerText=(r-e).toFixed(2))})),requestAnimationFrame(this.render)},this.canvas=e}Initialize(){return r(this,void 0,void 0,(function*(){yield this.setupDevice(),yield this.createAssets(),yield this.makePipeline(),this.render()}))}setupDevice(){var e,n;return r(this,void 0,void 0,(function*(){this.adapter=yield null===(e=navigator.gpu)||void 0===e?void 0:e.requestAdapter(),this.device=yield null===(n=this.adapter)||void 0===n?void 0:n.requestDevice(),this.context=this.canvas.getContext("webgpu"),this.format="bgra8unorm",this.context.configure({device:this.device,format:this.format,alphaMode:"opaque"})}))}makePipeline(){return r(this,void 0,void 0,(function*(){const r=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:"rgba8unorm",viewDimension:"2d"}}]});this.ray_tracing_bind_group=this.device.createBindGroup({layout:r,entries:[{binding:0,resource:this.color_buffer_view}]});const n=this.device.createPipelineLayout({bindGroupLayouts:[r]});this.ray_tracing_pipeline=this.device.createComputePipeline({layout:n,compute:{module:this.device.createShaderModule({code:"@group(0) @binding(0) var color_buffer: texture_storage_2d<rgba8unorm, write>;\r\n\r\nstruct Sphere {\r\n    center: vec3<f32>,\r\n    radius: f32,\r\n}\r\n\r\nstruct Ray {\r\n    direction: vec3<f32>,\r\n    origin: vec3<f32>,\r\n}\r\n\r\nconst spheres: array<Sphere,6> = array(\r\n    Sphere(vec3<f32>(6.0, -0.25,  1.5), 0.5),\r\n    Sphere(vec3<f32>(6.0,  0.25,  1.5), 0.5),\r\n    Sphere(vec3<f32>(6.0, -0.25,  0.0), 0.5),\r\n    Sphere(vec3<f32>(6.0,  0.25,  0.0), 0.5),\r\n    Sphere(vec3<f32>(6.0, -0.25, -1.5), 0.5),\r\n    Sphere(vec3<f32>(6.0,  0.25, -1.5), 0.5)\r\n);\r\n\r\n@compute @workgroup_size(8,8,1)\r\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\r\n\r\n    let screen_size: vec2<u32> = textureDimensions(color_buffer);\r\n    let screen_pos : vec2<i32> = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y));\r\n\r\n    let horizontal_coefficient: f32 = (f32(screen_pos.x) - f32(screen_size.x) / 2) / f32(screen_size.x);\r\n    let vertical_coefficient: f32 = (f32(screen_pos.y) - f32(screen_size.y) / 2) / f32(screen_size.x);\r\n    let forwards: vec3<f32> = vec3<f32>(1.0, 0.0, 0.0);\r\n    let right: vec3<f32> = vec3<f32>(0.0, -1.0, 0.0);\r\n    let up: vec3<f32> = vec3<f32>(0.0, 0.0, -1.0);\r\n\r\n    var myRay: Ray;\r\n    myRay.direction = normalize(forwards + horizontal_coefficient * right + vertical_coefficient * up);\r\n    myRay.origin = vec3<f32>(0.0, 0.0, 0.0);\r\n\r\n    var pixel_color : vec3<f32> = vec3<f32>(0.5, 0.0, 0.25);\r\n\r\n    const epsilon: f32 = 0.001;\r\n    const maxDistance: f32 = 9999;\r\n    const maxSteps: u32 = 32;\r\n    var totalDistanceMarched: f32 = 0.0;\r\n\r\n    for (var step: u32 = 0; step < maxSteps; step++) {\r\n\r\n        var distanceMarched: f32 = maxDistance;\r\n        // top row: union\r\n        distanceMarched = min(\r\n            distanceMarched, \r\n            union_op(distance_to_sphere(&myRay, 0), distance_to_sphere(&myRay, 1)));\r\n        \r\n        // middle row: intersection\r\n        distanceMarched = min(\r\n            distanceMarched, \r\n            intersect_op(distance_to_sphere(&myRay, 2), distance_to_sphere(&myRay, 3)));\r\n        \r\n        // top row: difference\r\n        distanceMarched = min(\r\n            distanceMarched, \r\n            difference_op(distance_to_sphere(&myRay, 4), distance_to_sphere(&myRay, 5)));\r\n        \r\n        if (distanceMarched < epsilon) {\r\n            pixel_color = totalDistanceMarched / 10 * vec3<f32>(0.5, 1.0, 0.75);\r\n            break; \r\n        }\r\n        \r\n        if (totalDistanceMarched > maxDistance) {\r\n            break;\r\n        }\r\n        totalDistanceMarched += distanceMarched;\r\n        \r\n        myRay.origin += myRay.direction * distanceMarched;\r\n    }\r\n\r\n    textureStore(color_buffer, screen_pos, vec4<f32>(pixel_color, 1.0));\r\n}\r\n\r\nfn distance_to_sphere(\r\n    ray: ptr<function,Ray>, \r\n    i: i32) -> f32 {\r\n    \r\n    let sphere: Sphere = spheres[i];\r\n    let rayToSphere: vec3<f32> = sphere.center - (*ray).origin;\r\n    return length(rayToSphere) - sphere.radius;\r\n    \r\n}\r\n\r\nfn union_op(a: f32, b: f32) -> f32 {\r\n    return min(a, b);\r\n}\r\n\r\nfn intersect_op(a: f32, b: f32) -> f32 {\r\n    return max(a, b);\r\n}\r\n\r\nfn negate_op(a: f32) -> f32 {\r\n    return -a;\r\n}\r\n\r\nfn difference_op(a: f32, b: f32) -> f32 {\r\n    return max(a, -b);\r\n}"}),entryPoint:"main"}});const t=this.device.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]});this.screen_bind_group=this.device.createBindGroup({layout:t,entries:[{binding:0,resource:this.sampler},{binding:1,resource:this.color_buffer_view}]});const i=this.device.createPipelineLayout({bindGroupLayouts:[t]});this.screen_pipeline=this.device.createRenderPipeline({layout:i,vertex:{module:this.device.createShaderModule({code:e}),entryPoint:"vert_main"},fragment:{module:this.device.createShaderModule({code:e}),entryPoint:"frag_main",targets:[{format:"bgra8unorm"}]},primitive:{topology:"triangle-list"}})}))}createAssets(){return r(this,void 0,void 0,(function*(){this.color_buffer=this.device.createTexture({size:{width:this.canvas.width,height:this.canvas.height},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),this.color_buffer_view=this.color_buffer.createView(),this.sampler=this.device.createSampler({addressModeU:"repeat",addressModeV:"repeat",magFilter:"linear",minFilter:"nearest",mipmapFilter:"nearest",maxAnisotropy:1})}))}}(n);t.Initialize()})();